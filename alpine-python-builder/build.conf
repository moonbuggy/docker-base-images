# shellcheck shell=bash disable=SC2034

SOURCE_REPO='python'
ARCH_YAML='hooks/arch.alpine.yaml'
CACHE_EXPIRY=604800
MINIMUM_ALPINE_VERSION='3.19'

BUILD_MULTIARCH='true'

declare -A BUILD_ARGS=( \
	[PYTHON_VERSION]='Python version' \
	[PYTHON_LATEST]='Python latest' \
	[PYPI_INDEX]='PyPi index' \
	[ALPINE_VERSION]='Alpine version' \
	[APK_PROXY]='APK proxy' \
)

declare -A CHECKOUT_DISPLAY=( \
	[PYTHON_VERSION]='Python version' \
	[PYTHON_LATEST]='Python latest' \
	[PYPI_INDEX]='PyPi index' \
	[ALPINE_VERSION]='Alpine version' \
	[APK_PROXY]='APK proxy' \
)

post_checkout_start () {
	# get all relevant tags from the source repo (pattern: <py_ver>-alpine<alp_ver>)
	echo "Fetching source repo tags.."
	eval_param_ifn 'SOURCE_REPO_TAGS' \
		"docker_api_repo_tags ${SOURCE_REPO} | sed -En 's|^([0-9]\.[0-9.]+-alpine[0-9.]*).*$|\\\1|p' | sort -uV"

	# get all available Python versions
	echo "Finding source Python versions.."
	eval_param_ifn 'SOURCE_PYTHON_VERSIONS' \
		"echo ${SOURCE_REPO_TAGS} | xargs -n1 | grep -oP '^[0-9.]+' | sort -uV"

	# check if any version numbers are provided via DOCKER_TAG
	unset ALPINE_VERSION

	case "${DOCKER_TAG}" in
		2*|3*) PYTHON_VERSION="$(echo "${DOCKER_TAG}" | grep -o '^[0-9.]*')" ;;&
		*alpine*)
			ALPINE_VERSION="$(echo "${DOCKER_TAG}" | grep -oP 'alpine\K[0-9.]*')"
			eval_param_ifn 'AVAILABLE_PYTHON_VERSIONS' \
				"echo ${SOURCE_REPO_TAGS} | grep -oP '[0-9.]+(?=-alpine${ALPINE_VERSION})'"
			;;
		*) add_param "${SOURCE_PYTHON_VERSIONS}" 'AVAILABLE_PYTHON_VERSIONS' ;;
	esac

	# get latest source Python version
	eval_param 'SOURCE_LATEST' "echo ${AVAILABLE_PYTHON_VERSIONS} | xargs -n1 | tail -n1"

	# determine target Python versions
	eval_param 'PYTHON_VERSION' \
		"search_repo_tags ${PYTHON_VERSION:-${SOURCE_LATEST}} ${AVAILABLE_PYTHON_VERSIONS}"
	eval_param 'PYTHON_MINOR' "parse_version_minor ${PYTHON_VERSION}"
	eval_param 'PYTHON_MINOR_LATEST' \
		"search_repo_tags ${PYTHON_MINOR} ${AVAILABLE_PYTHON_VERSIONS}"

	# determine source Alpine versions
	eval_param 'source_alpine_versions' \
		"docker_api_repo_tags ${SOURCE_REPO} | grep -oP '^${PYTHON_VERSION}-alpine\\\K[0-9.]+$'"

	# go with the lowest Alpine version that exceeds the minimum
	for version in ${source_alpine_versions:-}; do
		[ "${MINIMUM_ALPINE_VERSION}" \
				= "$(printf '%s\n' "${MINIMUM_ALPINE_VERSION}" "${version}" | sort -V | head -n1)" ] \
			&& ALPINE_VERSION="${version}" \
			&& break
	done

	# if we can't meet the minimum Alpine version go with the highest available
	[ -z "${ALPINE_VERSION}" ] \
		&& ALPINE_VERSION="$(echo ${source_alpine_versions} | xargs -n1 | tail -n1)"

	add_param "${ALPINE_VERSION}" 'ALPINE_VERSION'

	SOURCE_TAG="${PYTHON_VERSION}-alpine${ALPINE_VERSION}"
	TARGET_TAG="${SOURCE_TAG}"
}

get_manifest_tags () {
	local extra_tags && extra_tags=()

	# matching a latest Python minor/major version
	[ x"${PYTHON_VERSION}" = x"${PYTHON_MINOR_LATEST}" ] \
			&& extra_tags+=("${PYTHON_MINOR}-alpine${ALPINE_VERSION}")

	# if we're using latest Alpine version add tags without the '-alpine<alp_ver>'
	# if [ "x${ALPINE_VERSION}" = "x${ALPINE_LATEST}" ]; then
	# 	for tag in "${extra_tags[@]}"; do
	# 		extra_tags+=("${tag%-*}")
	# 	done
	# 	extra_tags+=("${PYTHON_VERSION}")
	# fi

	echo "${extra_tags[@]}"
}
