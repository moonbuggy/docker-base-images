# shellcheck shell=bash disable=SC2034

SOURCE_REPO="moonbuggy2000/alpine-s6-nginx"

# the Dockerfile has no RUN commands in it, so we don't need QEMU for multi-arch
NO_QEMU=1

declare -A CHECKOUT_DISPLAY=( \
	[ALPINE_VERSION]='Alpine version' \
	[SOURCE_LATEST]='Nginx latest' \
	[NGINX_VERSION]='Nginx version' \
)

## run at the start of post_checkout
post_checkout_start () {
	# get source repo tags
	[ -z "${SOURCE_REPO_TAGS+set}" ] \
		&& SOURCE_REPO_TAGS="$(docker_api_repo_tags "${SOURCE_REPO}")"
  add_param "${SOURCE_REPO_TAGS}" 'SOURCE_REPO_TAGS'

	# find latest Nginx version in source repo
	[ -z "${SOURCE_LATEST}" ] \
		&& SOURCE_LATEST="$(echo "${SOURCE_REPO_TAGS}" | xargs -n1 | grep -oP '^([0-9.]*)(?=-alpine.*)' | sort -uV | tail -n1)"
	add_param "${SOURCE_LATEST}" 'SOURCE_LATEST'

	# use an Nginx version from DOCKER_TAG, if available
	NGINX_VERSION="$(echo ${DOCKER_TAG} | grep -oP '^[0-9.]*')"
	# default to latest Nginx if not
	add_param "${NGINX_VERSION:-${SOURCE_LATEST}}" 'NGINX_VERSION'

	# get the latest Alpine version that provides the Nginx version
	# not needed for build, used to generate tags
	[ -z "${ALPINE_VERSION}" ] \
		&& ALPINE_VERSION="$(echo "${SOURCE_REPO_TAGS}" | xargs -n1 | grep -oP "^${NGINX_VERSION}-alpine\K[0-9.]*" | sort -uV | tail -n1 | awk -F \. '{print $1"."$2}')"
	add_param "${ALPINE_VERSION}" 'ALPINE_VERSION'

	TARGET_TAG="${NGINX_VERSION}"
	SOURCE_TAG="${NGINX_VERSION}"
}

## output a list of base tags to add during push
get_base_tags () { echo "${TARGET_TAG} alpine${ALPINE_VERSION} ${TARGET_TAG}-alpine${ALPINE_VERSION}"; }

## output a list of extra tags to add during post_push
get_manifest_tags () {
	local extra_tags
	extra_tags=("nginx${NGINX_VERSION}" "alpine${ALPINE_VERSION}")
	[ "${NGINX_VERSION}" = "${SOURCE_LATEST}" ] && extra_tags+=('latest')
	echo "${extra_tags[@]}"
}
