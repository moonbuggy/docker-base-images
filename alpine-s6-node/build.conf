# shellcheck shell=bash disable=SC2034

SOURCE_REPO='node'
ARCH_YAML="hooks/arch.alpine.yaml"
# BUILD_BUILDX=1
BUILD_MULTIARCH=1
NO_QEMU=1


CACHE_EXPIRY=604800

declare -A BUILD_ARGS=( \
	[S6_ARCH]='S6 arch' \
	[S6_VERSION]='S6 version' \
	[NODE_VERSION]='Node version' \
	[TARGET_ARCH_TAG]='Target arch' \
	[ALPINE_VERSION]='Alpine version' \
	[APK_PROXY]='APK proxy' \
)

declare -A CHECKOUT_DISPLAY=( \
	[ALPINE_VERSION]='Alpine version' \
	[APK_PROXY]='APK proxy' \
	[NODE_VERSION]='Node version' \
	[NODE_LATEST]='Node latest' \
	[NODE_MINOR_LATEST]='Node minor latest' \
	[NODE_MAJOR_LATEST]='Node major latest' \
	[S6_SOURCE]='S6 source' \
	[S6_REASON]='S6 source reason' \
)

post_checkout_start () {
	echo "Fetching source repo tags.."
	eval_param_ifn 'SOURCE_REPO_TAGS' "docker_api_repo_tags ${SOURCE_REPO} | xargs -n1 | grep -oP '[0-9\.]+\-alpine[0-9\.]+$'"
	eval_param_ifn 'NODE_LATEST' "echo '${SOURCE_REPO_TAGS}' | xargs -n1 | grep -oP '^[^-]+' | sort -uV | tail -n1"

	echo "Configuring versions.."
	[[ "${DOCKER_TAG}" =~ ^[0-9] ]] \
		&& TARGET_VERSION="${DOCKER_TAG%-*}" \
		|| TARGET_VERSION="${NODE_LATEST}"

	# determine target Node version and prepare variables for tagging images
	eval_param 'NODE_VERSION' "search_repo_tags ${TARGET_VERSION} ${SOURCE_REPO_TAGS}"

	[ -z "${NODE_VERSION}" ] \
		&& echo "ERROR: Node version '${TARGET_VERSION}' cannot be found in Docker repo '${SOURCE_REPO}'." \
		&& exit 1

	eval_param 'NODE_MAJOR' "parse_version_major ${NODE_VERSION}"
	eval_param 'NODE_MAJOR_LATEST' "search_repo_tags ${NODE_MAJOR} ${SOURCE_REPO_TAGS}"
	eval_param 'NODE_MINOR' "parse_version_minor ${NODE_VERSION}"
	eval_param 'NODE_MINOR' "search_repo_tags ${NODE_MINOR} ${SOURCE_REPO_TAGS}"

	# use highest Alpine version available for the given Node version
	eval_print_param 'ALPINE_LATEST' \
		"echo ${SOURCE_REPO_TAGS} | xargs -n1 | grep -oP '${NODE_VERSION}\-alpine\\\K[0-9\\\.]+' | sort -uV | tail -n1"

	add_param "${ALPINE_LATEST}" 'ALPINE_VERSION'

	[ -z "${ALPINE_VERSION}" ] \
		&& echo "ERROR: Can't determine Alpine version for Node ${NODE_VERSION}." \
		&& exit 1

	unset EXCLUDED_ARCHES
	unset DOCKERFILE_OVERRIDE
	unset S6_REASON

	# always use moonbuggy2000/s6 for current major versions, to ensure we have
	# the same s6 version across all builds (the APK will be older than s6 in the
	# just-containers/s6-overlay repo)
	S6_SOURCE="moonbuggy2000/s6-overlay"
	S6_VERSION="latest"
	DOCKERFILE_OVERRIDE="Dockerfile.no_apk"

	# if s6-overlay isn't available via apk for the Alpine version then we need to
	# install it from the moonbuggy2000/s6 images on Docker HUb
	# eval_param_ifn 'S6_APK_VERSION' "alpine_package_version s6-overlay ${ALPINE_VERSION}"
	# case "${S6_APK_VERSION}" in
	# 	3*)
	# 		S6_SOURCE="Alpine repo"
	# 		S6_VERSION="${S6_APK_VERSION}"
	# 		S6_REASON=""
	# 		;;
	# 	2*)
	# 		S6_REASON="APK is less than v3"
	# 		;;&
	# 	"")
	# 		S6_REASON="s6-overlay APK not found"
	# 		;;&
	# 	*)
	# 		DOCKERFILE_OVERRIDE="Dockerfile.no_apk"
	# 		S6_VERSION="latest"
	# 		S6_SOURCE="moonbuggy2000/s6-overlay"
	# 		;;
	# esac

	add_param "${S6_VERSION}" 'S6_VERSION'
	add_param "${S6_SOURCE:-Alpine repo}" 'S6_SOURCE'

	SOURCE_TAG="${NODE_VERSION}-alpine${ALPINE_VERSION}"
	TARGET_TAG="${SOURCE_TAG}"
}

get_manifest_tags () {
	local extra_tags && extra_tags=()

	case "${NODE_VERSION}" in
		"${NODE_MINOR_LATEST}")
			extra_tags+=("${NODE_MINOR}-alpine${ALPINE_VERSION}" "${NODE_MINOR}") ;;&
		"${NODE_MAJOR_LATEST}")
			extra_tags+=("${NODE_MAJOR}-alpine${ALPINE_VERSION}" "${NODE_MAJOR}") ;;&
		"${NODE_LATEST}")
			extra_tags+=('latest') ;;&
	esac

	case "${ALPINE_VERSION}" in
		"${ALPINE_LATEST}")
			for tag in ${extra_tags[*]}; do
				extra_tags+=("${tag%%-*}")
			done
			extra_tags+=("${NODE_VERSION}")
			;;
	esac

	echo "${extra_tags[@]}"
}
