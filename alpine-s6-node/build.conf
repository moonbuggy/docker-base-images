# shellcheck shell=bash disable=SC2034

SOURCE_REPO='node'
SOURCE_ARCH_PREFIX='true'
BUILD_BUILDX=1

CACHE_EXPIRY=604800

declare -A BUILD_ARGS=( \
	[S6_ARCH]='S6 arch' \
	[S6_VERSION]='S6 version' \
	[NODE_VERSION]='Node version' \
	[TARGET_ARCH_TAG]='Target arch' \
	[ALPINE_VERSION]='Alpine version' \
)

declare -A CHECKOUT_DISPLAY=( \
	[ALPINE_VERSION]='Alpine version' \
	[NODE_VERSION]='Node version' \
	[NODE_LATEST]='Node latest' \
	[NODE_MINOR_LATEST]='Node minor latest' \
	[NODE_MAJOR_LATEST]='Node major latest' \
	[S6_SOURCE]='S6 source' \
	[S6_REASON]='S6 source reason' \
)

post_checkout_start () {
	echo "Fetching source repo tags.."
	eval_param_ifn 'SOURCE_REPO_TAGS' "docker_api_repo_tags ${SOURCE_REPO} | grep -P '[0-9.]+\-alpine[0-9.]+$'"
	eval_param_ifn 'NODE_LATEST' "echo '${SOURCE_REPO_TAGS}' | xargs -n1 | grep -oP '^[^-]+' | sort -uV | tail -n1"

	echo "Configuring versions.."
	[[ "${DOCKER_TAG}" =~ ^[0-9] ]] \
		&& TARGET_VERSION="${DOCKER_TAG%-*}" \
		|| TARGET_VERSION="${NODE_LATEST}"

	# determine target Node version and prepare variables for tagging images
	add_param "$(search_repo_tags ${TARGET_VERSION} "${SOURCE_REPO_TAGS}")" 'NODE_VERSION'

	[ -z "${NODE_VERSION}" ] \
		&& echo "ERROR: Node version ${TARGET_VERSION} cannot be found in Docker repo '${SOURCE_REPO}'." \
		&& exit 1

	add_param "$(parse_version_major ${NODE_VERSION})" 'NODE_MAJOR'
	add_param "$(search_repo_tags ${NODE_MAJOR} "${SOURCE_REPO_TAGS}")" 'NODE_MAJOR_LATEST'
	add_param "$(parse_version_minor ${NODE_VERSION})" 'NODE_MINOR'
	add_param "$(search_repo_tags ${NODE_MINOR} "${SOURCE_REPO_TAGS}")" 'NODE_MINOR_LATEST'

	# use highest Alpine version available for the given Node version
	add_param "$(echo "${SOURCE_REPO_TAGS}" | xargs -n1 | grep -oP "${NODE_VERSION}\-alpine\K.*" | sort -uV | tail -n1)" 'ALPINE_LATEST'
	add_param "${ALPINE_LATEST}" 'ALPINE_VERSION'

	[ -z "${ALPINE_VERSION}" ] \
		&& echo "ERROR: Can't determine Alpine version for Node ${NODE_VERSION}." \
		&& exit 1

	add_param "$(parse_version_minor ${ALPINE_VERSION})" 'ALPINE_MINOR'

	unset EXCLUDED_ARCHES
	unset DOCKERFILE_OVERRIDE
	unset BUILD_BUILDX

	# if s6-overlay isn't available via apk for the Alpine version then we need to
	# install it from the moonbuggy2000/s6 images on Docker HUb
	eval_param_ifn 'S6_APK_VERSION' "alpine_package_version s6-overlay ${ALPINE_VERSION}"
	case "${S6_APK_VERSION}" in
		3*)
			S6_SOURCE="Alpine repo"
			S6_VERSION="${S6_APK_VERSION}"
			S6_REASON=""
			;;
		2*)
			S6_REASON="APK is less than v3"
			;;&
		"")
			S6_REASON="s6-overlay APK not found"
			;;&
		*)
			DOCKERFILE_OVERRIDE="Dockerfile.no_apk"
			S6_VERSION="latest-alpine${ALPINE_MINOR}"
			S6_SOURCE="moonbuggy2000/s6"

			if [[ "${ALPINE_MINOR#*.}" -le 11 ]]; then
				# there's no s6 built for these
				EXCLUDED_ARCHES='i386 ppc64le riscv64'
			fi
			;;
	esac

	add_param "${S6_VERSION}" 'S6_VERSION'
	add_param "${S6_SOURCE:-Alpine repo}" 'S6_SOURCE'

	SOURCE_TAG="${NODE_VERSION}-alpine${ALPINE_VERSION}"
	TARGET_TAG="${SOURCE_TAG}"
}

get_base_tags() {
	local extra_tags && extra_tags=()

	case "${NODE_VERSION}" in
		"${NODE_MINOR_LATEST}") extra_tags+=("${NODE_MINOR}-alpine${ALPINE_VERSION}") ;;&
		"${NODE_MAJOR_LATEST}") extra_tags+=("${NODE_MAJOR}-alpine${ALPINE_VERSION}") ;;
	esac

	case "${ALPINE_VERSION}" in
		"${ALPINE_LATEST}")
			for tag in ${extra_tags[*]}; do
				extra_tags+=("${tag%%-*}")
			done
			extra_tags+=("${NODE_VERSION}")
			;;
	esac

	echo "${extra_tags[@]}"
}

## return an array of extra tags to add during post_push
get_manifest_tags () {
	local extra_tags=() && extra_tags=("$(get_base_tags)")

	case "${NODE_VERSION}" in
		"${NODE_LATEST}") extra_tags+=('latest') ;;&
		"${NODE_MINOR_LATEST}") extra_tags+=("${NODE_MINOR}") ;;&
		"${NODE_MAJOR_LATEST}") extra_tags+=("${NODE_MAJOR}") ;;
	esac

	echo "${extra_tags[@]}"
}
