#! /usr/bin/env bash

. hooks/env

echo '--- post_checkout ---'

[ ! -d "${DATA_DIR}" ] && mkdir -p "${DATA_DIR}"

cat "${ARCH_YAML}" > "${CONFIG_YAML}"

## parse arch config
#
while read -r line; do declare "${line}"; done < <(parse_yaml "${ARCH_YAML}")

##	call any post_checkout_start() from build.conf
#
ifFunc post_checkout_start && post_checkout_start

## parse Docker environment variables
#
case "${DOCKER_TAG##*-}" in
	i386|amd64|armv*|arm64*|ppc64*|s390x)
		[ -z "${TARGET_TAG+set}" ] && \
			TARGET_TAG="${DOCKER_TAG%-*}"
		add_param "${DOCKER_TAG##*-}" 'BUILD_ARCH'
		[ -z "${SINGLE_ARCH_BUILD+set}" ] && SINGLE_ARCH_BUILD=1
		;;
	*)
		[ -z "${TARGET_TAG+set}" ] && \
			TARGET_TAG="${DOCKER_TAG}"
		;;
esac

## parse 'latest' tag
#
if [ "${TARGET_TAG}" = 'latest' ]; then
	[ -z "${SOURCE_LATEST}" ] && \
		echo "Getting latest source tag.." && \
		SOURCE_LATEST="$(docker_api_latest "${SOURCE_REPO}")"

	[ -n "${SOURCE_LATEST}" ] && \
		add_param "${SOURCE_LATEST}" 'SOURCE_LATEST' && \
		TARGET_TAG="${SOURCE_LATEST}"
fi

##	get TARGET_TAG from get_target_tag, if set in build.conf
ifFuncSetVar TARGET_TAG get_target_tag

##	get SOURCE_TAG from get_source_tag, if set in build.conf
ifFuncSetVar SOURCE_TAG get_source_tag

[ -z ${SOURCE_TAG+set} ] && SOURCE_TAG="${TARGET_TAG}"
add_param "${SOURCE_TAG}" 'SOURCE_TAG'

[ -n "${SOURCE_REPO}" ] \
	&& SOURCE_IMAGE="${SOURCE_REPO}:${SOURCE_TAG}" \
	&& SOURCE_MANIFEST="${DATA_DIR}/manifest.${SOURCE_REPO##*/}.${SOURCE_TAG}"

## get source manifest
#
if [ -z "${SOURCE_MANIFEST}" ]; then
	echo "No source image, no manifest to pull."
elif [ ! -s "${SOURCE_MANIFEST}" ] || [ "$(( $(date +"%s") - $(date -r "${SOURCE_MANIFEST}" +"%s") ))" -gt "${CACHE_EXPIRY}" ]; then
	manifest_cmd=("$(get_manifest_tool)" inspect "${SOURCE_IMAGE}")

	echo 'Fetching source manifest..'

#	pretty_manifest_cmd="$(echo "${manifest_cmd[*]}" | sed -r -e "s/(--)/\\\ \n\t\1/g")"
#	printf '\n--- manifest command ---\n%s\n' "${pretty_manifest_cmd}"

	# manifest_data="$("${manifest_cmd[@]}" 2> /dev/null)"
	manifest_data="$("${manifest_cmd[@]}")"
	[ -z "${manifest_data}" ] \
		&& { printf '\nCould not find manifest for source image: %s\nExiting.\n' "${SOURCE_IMAGE}"; exit 1; }

	echo "${manifest_data}" > "${SOURCE_MANIFEST}";
else
	echo "Using cached manifest."
fi
echo

print_param "${DOCKER_TAG}" 'Docker tag'
add_print_param "${TARGET_TAG}" 'TARGET_TAG' 'Target tag'

## determine the arches to build
#
if [ -n "${BUILD_ARCH:-}" ]; then
	build_arches="${BUILD_ARCH}"
else
	if [ -n "${INCLUDED_ARCHES+set}" ]; then
		configured_arches="$(echo ${INCLUDED_ARCHES} | sort -u | xargs)"
	else
		configured_arches="$(sed -En 's/(^\w*):\s*$/\1/p' "${ARCH_YAML}" | sort -u | xargs)"
	fi
	print_param "${configured_arches}" 'Configured arches'

	if [ -n "${EXCLUDED_ARCHES+set}" ]; then
		print_param "${EXCLUDED_ARCHES}" 'Excluded arches'
		for excluded in ${EXCLUDED_ARCHES}; do
			configured_arches="$(echo "${configured_arches}" | xargs -n1 | grep -v "^${excluded}$" | sort -u | xargs)"
		done
	fi

	[ -n "${SOURCE_ARCHES:-}" ] \
		&& source_arches="${SOURCE_ARCHES}" \
		|| source_arches="$(sed -n -e 'N;s/.*Arch:\s*\(\w*\)\n.*Variant:\s*\(\w*\)/\1\2/p;D;' "${SOURCE_MANIFEST}" \
			| sed -e 's/[^\w]*386/i386/' | sort -u | xargs)"

	# default arch if manifest-tool doesn't return anything useful
	[ -z "${source_arches}" ] && source_arches='amd64'

	print_param "${source_arches}" 'Source arches'

	build_arches="$(comm -12 \
		<(echo "${configured_arches}" | xargs -n1 | LC_ALL=C sort) \
		<(echo "${source_arches}" | xargs -n1 | LC_ALL=C sort) \
		| xargs)"
fi
add_print_param "${build_arches}" 'build_arches' 'Build arches'

## determine the platforms being built
#
platforms=''
for arch in ${build_arches}; do
	manifest_platform="${arch}_MANIFEST_PLATFORM"
	[ -n "${!manifest_platform}" ] \
		&& platform_string="${arch}_MANIFEST_PLATFORM" \
		|| platform_string="${arch}_PLATFORM"
  platforms="${platforms},${!platform_string}"
done
add_print_param "${platforms:1}" 'platforms' 'Platforms'

[ -z "${platforms}" ] \
	&& echo "No platforms found. Exiting." \
	&& exit 1

add_print_param "${SOURCE_IMAGE}" 'SOURCE_IMAGE' 'Source image'

##	read keys from arch.yaml
#
arch_yaml_keys="$(sed -En 's|^[[:space:]][[:space:]](.*):.*|\1|p' ${ARCH_YAML} | sort -u | xargs)"
# available_keys="$(comm -12 <(printf '%s\n' ${arch_yaml_keys} \
	# | LC_ALL=C sort) <(printf '%s\n' ${ARCH_KEYS} | LC_ALL=C sort) | xargs)"
# add_param "${available_keys}" 'available_keys'
add_param "${arch_yaml_keys}" 'available_keys'

# expect PYTHON_WHEELS to be a list of wheels each set as such:
#
#		<module_name>(-<ssl_library)([>|=]=<module_version)
#
if [ -n "${PYTHON_WHEELS+set}" ]; then
	wheel_tags=''
	for wheel in ${PYTHON_WHEELS}; do
		wheel_version="$(py_required_version "${wheel}")" \
			|| continue
		wheel_name="${wheel%%[=<>]*}"
		wheel_tags="${wheel_name%-}${wheel_version} ${wheel_tags}"
	done
	add_print_param "${wheel_tags}" 'WHEEL_TAGS' 'Python wheels'
fi

##	call any post_checkout_end() from build.conf
#
ifFuncExec post_checkout_end

for param in $(echo "${!CHECKOUT_DISPLAY[@]}" | xargs -n1 | sort); do
	[ -n "${!param}" ] && print_param "${!param}" "${CHECKOUT_DISPLAY[${param}]}"
done

echo
