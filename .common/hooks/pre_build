#! /usr/bin/env bash

. hooks/env

echo "--- pre_build ---"

touch '_dummyfile'

if [ -z "${NO_QEMU}" ]; then
	## register qemu-*-static for all supported processors except the current one
	docker run --rm --privileged multiarch/qemu-user-static:register --reset >/dev/null \
		&& echo 'Registered QEMU interpreters.'
	echo

	## get qemu-*-static for all build architectures
	mkdir -p "${QEMU_DIR}/"

	qemu_arches=()
	for arch in ${build_arches}; do
		qemu_var="${arch}_QEMU_ARCH"
		qemu_arches+=("${!qemu_var}")
	done

	if [ -n "${qemu_arches[*]}" ]; then
		echo "--- pre_build (QEMU) ---"

		for qemu_arch in $(echo "${qemu_arches[@]}" | xargs -n1 | sort -uV | xargs); do
			qemu_image="multiarch/qemu-user-static:x86_64-${qemu_arch}"

			[ -f "${QEMU_DIR}/qemu-${qemu_arch}-static" ] \
				&& echo "Importing: ${qemu_image}" \
				&& echo "Status: Using existing file." \
				&& continue

			docker_container_contents "${qemu_image}" "${QEMU_DIR}/" '--strip-components=2'
		done
		echo
	fi
fi

if [ -n "${WHEEL_TAGS:-}" ] && [ -z "${NO_PULL_WHEELS}" ]; then
	echo "--- pre_build (python wheels) ---"
	for arch in ${build_arches}; do
		this_target_arch_tag="${arch}_TARGET_ARCH_TAG"

		mkdir -p "${IMPORTS_DIR}/${!this_target_arch_tag}"

		for wheel_tag in ${WHEEL_TAGS}; do
			import_image="${MUSL_WHEEL_REPO}:${wheel_tag}-py${PYTHON_VERSION}-${!this_target_arch_tag}"
			docker_container_contents "${import_image}" "${IMPORTS_DIR}/${!this_target_arch_tag}/"
		done
	done
	echo
fi

##	call any pre_build_end() from build.conf
#
ifFuncExec pre_build_end
echo
