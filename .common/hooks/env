MANIFEST_TOOL_REPO="estesp/manifest-tool"
MUSL_WHEEL_REPO="moonbuggy2000/python-musl-wheels"

DATA_DIR='.build_data'
QEMU_DIR='.qemu_static'
IMPORTS_DIR='.imports'

ARCH_YAML='arch.yaml'
CONFIG_YAML="${DATA_DIR}/config.${DOCKER_TAG}.yaml"

#BUILD_PLATFORM_ARG='true'

# 1 day
#CACHE_EXPIRY=86400
# 7 days
#CACHE_EXPIRY=604800
# 30 days
CACHE_EXPIRY=2592000

DOCKER_FILE='Dockerfile'

[ ! -d "${DATA_DIR}" ] && mkdir -p "${DATA_DIR}"

## import config for this repo
. "build.conf" || { echo 'No build.conf!'; exit 1; }

## handling writing and printing of parameters
#	add_param       <value> <key>
#	print_param     <value> <desc>
#	add_print_param <value> <key> <desc>
add_param () { echo "${2}: ${1}" >> "${CONFIG_YAML}"; declare -g "${2}=${1}"; }
print_param () { printf '%-20s %-8s\n' "${2}" "${1}"; }
add_print_param () { add_param "${1}" "${2}"; print_param "${1}" "${3:-${2}}"; }

## curl the provided URL, handle errors and cache
# get_url <URL>
get_url () {
	local page_data
	local cache_file

	cache_file="${DATA_DIR}/$(echo "${1}" | md5sum | cut -d' ' -f1)"

	if [ -f "${cache_file}" ] && [ "$(( $(date +"%s") - $(date -r "${cache_file}" +"%s") ))" -lt "${CACHE_EXPIRY}" ]; then
#		>&2 echo "Using cache: ${cache_file}"
		cat "${cache_file}"
	else
#		>&2 echo "Downloading: ${1}"
		page_data="$(curl -sL -w "%{http_code}\n" "${1}")"
		http_code="${page_data:(-3)}"
		if [ "${http_code}" = "200" ]; then
			echo "${page_data%???}" | tee "${cache_file}"
		else
			echo "HTTP Error: ${http_code}"
			return 1
		fi
	fi
}

# git_api_data <repo> <request>
git_api_data () {	get_url "https://api.github.com/repos/${1}/${2}"; }

# git_api_element <repo> <request> <tag>
git_api_element () { git_api_data "${1}" "${2}" | sed -En 's|.*"'"${3}"'"\W+"([^"]+)".*|\1|p'; }

# git_latest_release <repo> <tag_name>
git_latest_release () { git_api_element "${1}" 'releases/latest' "${2:-tag_name}"; }


# pypi_api_XXXX <project>
pypi_api_data () {	get_url "https://pypi.org/simple/${1}"; }
pypi_api_versions () { pypi_api_data "${1}" | grep -oP "(?<=${1}-)[0-9.]{4,}(?=.tar.gz)" | sort -uV; }
pypi_api_latest_version () { pypi_api_versions "${1}" | tail -n1; }

# py_musl_wheel_XXXX <wheel string>
py_musl_wheel_versions () { docker_api_repo_tags "${MUSL_WHEEL_REPO}" | grep -oP '([0-9.]+)(?=-py)' | sort -uV; }
py_musl_wheel_latest () { py_musl_wheel_versions "${1}" | tail -n1; }

# parse the requirements.txt file for a module and determine the version to use
# if the requirements.txt locks the max version with == or <= then use it
# otherwise get the latest version available in moonbuggy2000/python-musl-wheels
#
# py_required_version <module>(-<ssl_library>) <requirements file or list>
py_required_version () {
	local modtag
	local modname
	local modstring
	local modsign
	local modver

	modtag="${1}"

	local requirements
	case "${2}" in
		"")	requirements="$(cat requirements.txt 2>/dev/null)" ;;
		*requirements.txt) requirements="$(cat "${2}" 2>/dev/null)" ;;
		*) requirements="${2}"
	esac

	[ -z "${requirements}" ] \
		&& >&2 echo "No requirements in: ${2}" \
		&& return 1

	case "${modtag##*-}" in
		openssl|libressl) modname="${modtag%-*}" ;;
		*) modname="${modtag}" ;;
	esac

	modstring="$(echo "${requirements}" | xargs -n1 | grep -P "^#?${modname}\W")"
	modsign="$(echo "${modstring}" | grep -oP "([<>=])(?==)")"

	[ "${modsign}" = ">" ] \
		&& modver="$(py_musl_wheel_latest "${modtag}")" \
		|| modver="$(echo "${modstring}" | grep -oP '(?<=\W{2})[0-9.]*')"

	[ -z "${modver}" ] \
		&& >&2 echo "No version found for: ${1}" \
		&& return 1

	echo "${modver}"
}

python_get_module_from_string () {
	local mod_namever
	local mod_longname
	local mod_name
	local mod_ver
#	local mod_ssllib
	local mod_pyver

	IFS='-' read -r -a input_array <<< "${1}"

	mod_namever=''

	for value in "${input_array[@]}"; do
		case "${value}" in
			py[0-9]*)
				mod_pyver="${value/py/}"
				break
				;;
			amd64|arm64v8|armv6|armv7|386|ppc64le|s390x)
				break
				;;
			*[0-9])
				mod_ver="${value//[[:alpha:]]/}"
				;;&
			*)
				mod_namever="${mod_namever}-${value}"
				;;
		esac
	done

	mod_namever="${mod_namever/#-/}"
	mod_longname="${mod_namever%%[0-9.]*}"

	case "${mod_longname##*-}" in
		libressl|openssl)
#			mod_ssllib="${mod_longname##*-}"
			mod_name="${mod_longname%-*}"
			;;
		*)
			mod_name="${mod_longname}"
			;;
	esac

	[ -z "${mod_ver}" ] \
		&& mod_ver="$(docker_api_repo_tags "${DOCKER_REPO}" | grep -oP "(?<=${mod_longname})[0-9.]+(?=-py${mod_pyver})" | sort -uV | tail -n1)"
	[ -z "${mod_ver}" ] \
		&& mod_ver="$(pypi_api_latest_version "${mod_name}")"

	# >&2 print_param "${mod_namever}" 'mod namever'
	# >&2 print_param "${mod_longname}" 'mod longname'
	# >&2 print_param "${mod_name}" 'mod name'
	# >&2 print_param "${mod_ver}" 'mod ver'
	# >&2 print_param "${mod_pyver}" 'mod pyver'

	echo "${mod_longname}${mod_ver}"
}

docker_api_get_repo () {
	local repo && repo="${1}"
	[[ "${repo}" != *"/"* ]] && repo="library/${repo}"

	URL="https://registry.hub.docker.com/v2/repositories/${repo}/tags?page_size=100"
	while [ -n "${URL}" ]; do
#		>&2 echo "Getting: ${URL}"
		page="$(get_url "${URL}")"
		URL="$(echo -e "${page}" | grep -oP '(?<=next":")[^"]*(?=")')"
		echo -e "${page}" | sed 's/,/,\n/g'
	done
}

# docker_api_repo_tags <repo>
docker_api_repo_tags () { docker_api_get_repo "${1}" | sed -En 's|.*"name"\W+"([^"]*)".*|\1|p' | sort -uV; }

# docker_api_latest <repo>
docker_api_latest () { docker_api_repo_tags "${1}" | grep '\.' | cut -d'-' -f1 | sort -uV | tail -n1; }

# search_repo_tags <pattern> (<tags>)
#	useful to get latest versions from partial version strings
#
# e.g. to get a full X.Y.Z version number:
#	SOURCE_MAJOR=3; SOURCE_MAJOR_LATEST="$(search_repo_tags "${SOURCE_MAJOR}" "${REPO_TAGS}")"
#	SOURCE_MINOR=3.5; SOURCE_MINOR_LATEST="$(search_repo_tags "${SOURCE_MINOR}" "${REPO_TAGS}")"
search_repo_tags () {
	local repo_tags && repo_tags="${2}"
	[ -z "${repo_tags}" ] && repo_tags="${SOURCE_REPO_TAGS}"
	echo "${repo_tags}" | sed -En 's/^('"${1}"'[0-9.]*).*/\1/p' | sort -uV | tail -n1
}

# docker_container_contents <repo:tag> <outpud folder> <tar args>
docker_container_contents () {
	[ -z "${1}" ] && return

	local import_image && import_image="${1}"
	local output_dir &&	output_dir="${2:-./}"
	local tar_args && tar_args="${3}"

	echo "Importing: ${import_image}"

	[ -n "${NOOP+set}" ] && [ -z "${WHEELS_FORCE_PULL+set}" ] && echo 'Status: [NOOP]' && return

	if [ -z "${WHEELS_FORCE_PULL+set}" ] && docker inspect "${import_image}" > /dev/null 2>&1; then
		echo "Status: Using existing local image."
	elif ! docker pull "${import_image}" 2>/dev/null | grep Status; then
		echo "Status: Image not found."
		return
	fi

	docker save "${import_image}" | tar --wildcards -xf - -O -- */layer.tar | tar "${tar_args}" -ixf - -C "${output_dir}"
}

## parse YAML configuration
#
parse_yaml () {
	local prefix && prefix="${2}"
	local s && s='[[:space:]]*' w='[a-zA-Z0-9_]*'
	local fs && fs=$(echo @|tr @ '\034')
	sed -ne "s|^\($s\):|\1|" \
		-e "s|^\(${s}\)\(${w}\)${s}:${s}[\"']\(.*\)[\"']${s}\$|\1${fs}\2${fs}\3|p" \
		-e "s|^\(${s}\)\(${w}\)${s}:${s}\(.*\)${s}\$|\1${fs}\2${fs}\3|p" "${1}" |
		awk -F"${fs}" '{
			indent = length($1)/2;
			vname[indent] = $2;
			for (i in vname) {if (i > indent) {delete vname[i]}}
			if (length($3) > 0) {
				vn=""; for (i=0; i<indent; i++) {vn=(vn)(vname[i])("_")}
				printf("%s%s%s=%s\n", "'"$prefix"'",vn, $2, $3);
			}
		}'
}

## get/set keys for a specific architecture
#
# get_arch_keys [<available_keys>]
#
get_arch_keys () {
	local keys

	[ $# -eq 0 ] \
		&& keys="${available_keys:-}" \
		|| keys="${1}"

	for key in ${keys}; do
		var="${arch}_${key}"
		declare -g "${key}=${!var}"
	done
}

## get the arch of the build host running this script
#
# currently only used to grab the correct file in get_manifest_tool()
#
get_this_arch() {
	case "$(uname -m)" in
		x86_64|amd64) echo 'amd64' ;;
		*86*) echo '386' ;;
		armv5*) echo 'armv5' ;;
		armv6*) echo 'armv6' ;;
		armv7*) echo 'armv7' ;;
		arm64|aarch64) echo 'arm64' ;;
		mips) echo 'mips64le' ;;
		powerpc|ppc64*) echo 'ppc64le' ;;
		s390x*) echo 's390x' ;;
	esac
}

## get manifest-tool
#
get_manifest_tool () {
	local existing_tool && existing_tool="$(command -v manifest-tool)"
	if [ -n "${existing_tool}" ]; then
		echo "${existing_tool}"
	else
		if [ ! -f manifest-tool ]; then
			LATEST_MANIFEST_TOOL="$(git_latest_release "${MANIFEST_TOOL_REPO}")"
			curl -sLo "manifest-tool" "https://github.com/${MANIFEST_TOOL_REPO}/releases/download/${LATEST_MANIFEST_TOOL}/manifest-tool-linux-$(get_this_arch)"
		fi
		chmod a+x "manifest-tool"
		echo './manifest-tool'
	fi
}

# ifFunc <func>
ifFunc () { type "${1}" 2> /dev/null | sed "s/${1}//" | grep -qwi function; }

# ifFuncExec <func> <args>
ifFuncExec () { if ifFunc "${1}"; then "${@}"; fi; }

# ifFuncSetVar <var> <func> <args>
ifFuncSetVar () {
	var="${1}" &&	shift
	value=$(ifFuncExec "${@}")
	if [ -n "${value}" ]; then declare -g "${var}=${value}"; fi
}

## read any valid existing config
[ -f "${CONFIG_YAML}" ] \
	&& [ "$(( $(date +"%s") - $(date -r "${CONFIG_YAML}" +"%s") ))" -lt "${CACHE_EXPIRY}" ] \
	&& while read -r line; do declare "${line}"; done < <(parse_yaml "${CONFIG_YAML}")

ifFuncExec env_end
