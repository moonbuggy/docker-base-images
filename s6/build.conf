# shellcheck shell=bash disable=SC2034

# SOURCE_REPO='moonbuggy2000/alpine-builder'
# S6_REPO="just-containers/s6-overlay"

# build all arches in arch.yaml,regardless of the source image arches
BUILD_ARCH="$(sed -En 's/(^\w*):\s*$/\1/p' "${ARCH_YAML}" | sort -u | xargs)"

# don't push manifest, we'll be pulling from downstream with the arch specified
# so there's no need for a combined multi-arch tag
# NO_MANIFEST=1

declare -A BUILD_ARGS=( \
	[S6_ARCH]='S6 arch' \
	[S6_V2_ARCH]='S6 v2 arch' \
	[PLATFORM]='Platform' \
	[SCRATCH_ARCH_TAG]='Scratch arch tag' \
	[S6_OVERLAY_VERSION]='S6 overlay version' \
	[ALPINE_VERSION]='Alpine version' \
)

declare -A CHECKOUT_DISPLAY=( \
	[S6_ARCH]='S6 arch' \
	[S6_OVERLAY_LATEST]='S6 latest' \
)

# define source packages we need and their GitHub repos
declare -A SOURCE_PACKAGES=(
	[EXECLINE]='skarnet/execline'
	[S6]='skarnet/s6'
	[S6_DNS]='skarnet/s6-dns'
	[S6_LINUX_INIT]='skarnet/s6-linux-init'
	[S6_LINUX_UTILS]='skarnet/s6-linux-utils'
	[S6_NETWORKING]='skarnet/s6-networking'
	[S6_OVERLAY]='just-containers/s6-overlay'
	[S6_OVERLAY_HELPERS]='just-containers/s6-overlay-helpers'
	[S6_PORTABLE_UTILS]='skarnet/s6-portable-utils'
	[S6_RC]='skarnet/s6-rc'
	[SKALIBS]='skarnet/skalibs'
	[XX]='tonistiigi/xx'
)

for package in "${!SOURCE_PACKAGES[@]}"; do
	BUILD_ARGS[${package}_VERSION]="$(echo "${package//_/ }" | tr '[:upper:]' '[:lower:]') version"
	BUILD_ARGS[${package}_REPO]="$(echo "${package//_/ }" | tr '[:upper:]' '[:lower:]') repo"
done

post_checkout_start () {
	local repo
	local version

	unset DOCKERFILE_OVERRIDE
	unset EXCLUDED_ARCHES
	unset FROM_SOURCE
	unset ALPINE_VERSION
	unset TARGET_TAG_SUFFIX
	unset BUILD_BUILDX
	unset BUILD_BUILDX_PROGRESS

	case ${DOCKER_TAG} in
		*source*|*alpine*|*testing*)
			FROM_SOURCE=1
			BUILD_BUILDX=1

			DOCKERFILE_OVERRIDE='Dockerfile.source'

			case ${DOCKER_TAG} in
				*testing*)
					FROM_SOURCE=1
					BUILD_BUILDX=1

					DOCKERFILE_OVERRIDE='Dockerfile.source.testing'
					BUILD_BUILDX_PROGRESS="plain"
					;;
			esac

			for package in "${!SOURCE_PACKAGES[@]}"; do
				repo="${package}_REPO"
				version="${package}_VERSION"
				add_param "${SOURCE_PACKAGES[$package]}" "${repo}"
				eval_param_if "${version}" "git_latest_tag ${!repo}"
			done

			# overrides
			add_param 'v0.0.1.0' 'S6_OVERLAY_HELPERS_VERSION'
			[[ "${XX_VERSION}" =~ ^v ]] && add_param "${XX_VERSION:1}" 'XX_VERSION'

			add_param "${S6_OVERLAY_VERSION}" 'S6_OVERLAY_LATEST'
			EXCLUDED_ARCHES='arm armhf i386'

			# deterine relevant Alpine versions
			eval_param_if 'ALPINE_REPO_TAGS' "docker_api_repo_tags alpine | grep '\\\.' | sed -En 's|^([0-9\.]+)\$|\\\1|p' | sort -uV"
			eval_param_if 'ALPINE_LATEST' "echo ${ALPINE_REPO_TAGS} | xargs -n1 | tail -n1"

			ALPINE_DOCKERTAG_VERSION="$(echo "${DOCKER_TAG}" | grep -oP 'alpine\K[0-9\.]*')"
			[ -z "${ALPINE_DOCKERTAG_VERSION}" ] && ALPINE_DOCKERTAG_VERSION="${ALPINE_LATEST}"
			add_param "$(search_repo_tags ${ALPINE_DOCKERTAG_VERSION} "${ALPINE_REPO_TAGS}")" 'ALPINE_VERSION'

			add_param "$(parse_version_minor ${ALPINE_VERSION})" 'ALPINE_MINOR'
			add_param "$(search_repo_tags ${ALPINE_MINOR} "${ALPINE_REPO_TAGS}")" 'ALPINE_MINOR_LATEST'

			if [[ "${ALPINE_MINOR#*.}" -le 11 ]]; then
				# can't find x86intrin.h when building from source below Alpine 3.12
				EXCLUDED_ARCHES="${EXCLUDED_ARCHES} i486 i686"
				# ./configure: unable to determine required linker flags for socket functions
				EXCLUDED_ARCHES="${EXCLUDED_ARCHES} ppc64le riscv64"
			fi

			TARGET_TAG_SUFFIX="-alpine${ALPINE_VERSION}"
			;;
		*)
			add_param "${SOURCE_PACKAGES[S6_OVERLAY]}" 'S6_OVERLAY_REPO'
			eval_param_if 'S6_OVERLAY_LATEST' "git_latest_release ${S6_OVERLAY_REPO}"
			EXCLUDED_ARCHES='armv5 armv6 armv7'
			;;
	esac

	# set this otherwise we pull manifests for moonbuggy2000/fetcher
	# SOURCE_LATEST=""

	[[ "${DOCKER_TAG}" =~ ^v?[0-9] ]] \
		&& S6_OVERLAY_VERSION="${DOCKER_TAG%-*}" \
		|| S6_OVERLAY_VERSION="${S6_OVERLAY_LATEST}"

	# ensure the leading 'v' is present
	[[ "${S6_OVERLAY_VERSION}" =~ ^v ]] || S6_OVERLAY_VERSION="v${S6_OVERLAY_VERSION}"

	add_param "${S6_OVERLAY_VERSION}" 'S6_OVERLAY_VERSION'

	# ppc64le is not available from just-containers/s6-overlay after v2.2.0.3
	# at the sime time i386 disappears and 1486 and 1686 appear
	if [ -z "${FROM_SOURCE}" ]; then
		if [ "$(echo "${S6_OVERLAY_VERSION}" | grep -oP "[0-9]" | head -n1)" -ge 3 ]; then
			EXCLUDED_ARCHES="${EXCLUDED_ARCHES} ppc64le i386"
		else
			EXCLUDED_ARCHES="${EXCLUDED_ARCHES} i486 i686 riscv64 s390x"
			DOCKERFILE_OVERRIDE='Dockerfile.s6v2'
		fi
	fi

	# strip out any leading 'v' for the target tag
	TARGET_TAG="${S6_OVERLAY_VERSION:1}${TARGET_TAG_SUFFIX:-}"

	# SOURCE_TAG='latest'
}

get_base_tags () {
	local extra_tags && extra_tags=()

	if [ "${TARGET_TAG}" = "${TARGET_TAG//alpine/}" ]; then
		# we're using pre-build binaries
		[[ "${S6_OVERLAY_VERSION}" = "${S6_OVERLAY_LATEST}" ]] \
			&& extra_tags+=("latest")
	else	# we're building from aource
		 if [ "${ALPINE_VERSION}" = "${ALPINE_MINOR_LATEST}" ]; then
				extra_tags+=("${S6_OVERLAY_VERSION:1}-alpine${ALPINE_MINOR}")
				[[ "${S6_OVERLAY_VERSION}" = "${S6_OVERLAY_LATEST}" ]] \
					&& extra_tags+=("latest-alpine${ALPINE_MINOR}")
			fi
			[[ "${S6_OVERLAY_VERSION}" = "${S6_OVERLAY_LATEST}" ]] \
				&& extra_tags+=("latest-alpine${ALPINE_VERSION}")
	fi
	echo "${extra_tags[@]}"
}

push_end() {
	# push a 'latest-ppc64le' tag for 2.2.0.3-ppc64le
	if [ "${TARGET_TAG}" = "2.2.0.3" ]; then
		printf '%-40s ' "latest-ppc64le"
		docker tag "${DOCKER_REPO}:${TARGET_TAG}-ppc64le" "${DOCKER_REPO}:latest-ppc64le"
		( [ -n "${NOOP}" ] || [ -n "${NO_PUSH}" ] ) && echo "[NOOP]" && return
		docker push "${DOCKER_REPO}:latest-ppc64le" | grep -i digest | cut -d' ' -f3
	fi
}

## return an array of extra tags to add during post_push
get_manifest_tags () {
	local extra_tags=() && extra_tags=("$(get_base_tags)")

	echo "${extra_tags[@]}"
}
