# syntax = docker/dockerfile:1.4.0

ARG ALPINE_VERSION="3.16.0"

ARG S6_ARCH="amd64"
ARG TARGET_ARCH_TAG="amd64"
ARG SCRATCH_ARCH_TAG="${TARGET_ARCH_TAG}"

ARG PLATFORM="linux/amd64"
ARG TARGETPLATFORM="${PLATFORM}"
ARG BUILDPLATFORM="linux/amd64"

ARG BEARSSL_VERSION="0.6"
ARG BEARSSL_REPO="bearssl.org/git/BearSSL"
ARG EXECLINE_VERSION="2.9.0.1"
ARG EXECLINE_REPO="skarnet/execline"
ARG S6_VERSION="v2.11.1.2"
ARG S6_REPO="skarnet/s6"
ARG S6_DNS_VERSION="v2.3.5.4"
ARG S6_DNS_REPO="skarnet/s6-dns"
ARG S6_LINUX_INIT_VERSION="v1.0.8.0"
ARG S6_LINUX_INIT_REPO="skarnet/s6-linux-init"
ARG S6_LINUX_UTILS_VERSION="v2.6.0.0"
ARG S6_LINUX_UTILS_REPO="skarnet/s6-linux-utils"
ARG S6_NETWORKING_VERSION="v2.5.1.1"
ARG S6_NETWORKING_REPO="skarnet/s6-networking"
ARG S6_OVERLAY_VERSION="v3.1.1.2"
ARG S6_OVERLAY_MAJOR="3"
ARG S6_OVERLAY_REPO="just-containers/s6-overlay"
ARG S6_OVERLAY_HELPERS_VERSION="v0.1.0.0"
ARG S6_OVERLAY_HELPERS_REPO="just-containers/s6-overlay-helpers"
ARG S6_PORTABLE_UTILS_VERSION="v2.2.5.0"
ARG S6_PORTABLE_UTILS_REPO="skarnet/s6-portable-utils"
ARG S6_RC_VERSION="v0.5.3.2"
ARG S6_RC_REPO="skarnet/s6-rc"
ARG SKALIBS_VERSION="v2.12.0.1"
ARG SKALIBS_REPO="skarnet/skalibs"
ARG XX_VERSION="1.1.1"

## prepare base images
#
FROM --platform="${BUILDPLATFORM}" moonbuggy2000/fetcher:latest AS fetcher
WORKDIR /src

FROM --platform="${BUILDPLATFORM}" "tonistiigi/xx:${XX_VERSION}" AS xx

FROM --platform="${BUILDPLATFORM}" "alpine:${ALPINE_VERSION}" AS builder-base
RUN apk -U --no-cache add bash clang llvm make
COPY --from=xx / /
ARG TARGETPLATFORM
RUN xx-apk add clang-dev g++ gcc musl-dev linux-headers
ENV XX_CC_PREFER_LINKER="ld"

## get add-contenv
#
FROM --platform="${BUILDPLATFORM}" "moonbuggy2000/s6-add-contenv:s6-overlay-v${S6_OVERLAY_MAJOR}" AS add_contenv

## get source
#
FROM fetcher AS src_bearssl
ARG BEARSSL_REPO
RUN git clone --depth 1 "https://${BEARSSL_REPO}" .

FROM fetcher AS src_execline
ARG EXECLINE_REPO
ARG EXECLINE_VERSION
RUN wget --no-check-certificate -qO- "https://github.com/${EXECLINE_REPO}/archive/refs/tags/${EXECLINE_VERSION}.tar.gz" | tar xzf - --strip 1

FROM fetcher AS src_s6
ARG S6_REPO
ARG S6_VERSION
RUN wget --no-check-certificate -qO- "https://github.com/${S6_REPO}/archive/refs/tags/${S6_VERSION}.tar.gz" | tar xzf - --strip 1

FROM fetcher AS src_s6_dns
ARG S6_DNS_REPO
ARG S6_DNS_VERSION
RUN wget --no-check-certificate -qO- "https://github.com/${S6_DNS_REPO}/archive/refs/tags/${S6_DNS_VERSION}.tar.gz" | tar xzf - --strip 1

FROM fetcher AS src_s6_linux_init
ARG S6_LINUX_INIT_REPO
ARG S6_LINUX_INIT_VERSION
RUN wget --no-check-certificate -qO- "https://github.com/${S6_LINUX_INIT_REPO}/archive/refs/tags/${S6_LINUX_INIT_VERSION}.tar.gz" | tar xzf - --strip 1

FROM fetcher AS src_s6_linux_utils
ARG S6_LINUX_UTILS_REPO
ARG S6_LINUX_UTILS_VERSION
RUN wget --no-check-certificate -qO- "https://github.com/${S6_LINUX_UTILS_REPO}/archive/refs/tags/${S6_LINUX_UTILS_VERSION}.tar.gz" | tar xzf - --strip 1

FROM fetcher AS src_s6_networking
ARG S6_NETWORKING_REPO
ARG S6_NETWORKING_VERSION
RUN wget --no-check-certificate -qO- "https://github.com/${S6_NETWORKING_REPO}/archive/refs/tags/${S6_NETWORKING_VERSION}.tar.gz" | tar xzf - --strip 1

FROM fetcher AS src_s6_overlay
ARG S6_OVERLAY_REPO
ARG S6_OVERLAY_VERSION
RUN wget --no-check-certificate -qO- "https://github.com/${S6_OVERLAY_REPO}/archive/refs/tags/${S6_OVERLAY_VERSION}.tar.gz" | tar xzf - --strip 1

FROM fetcher AS src_s6_overlay_helpers
ARG S6_OVERLAY_HELPERS_REPO
ARG S6_OVERLAY_HELPERS_VERSION
RUN wget --no-check-certificate -qO- "https://github.com/${S6_OVERLAY_HELPERS_REPO}/archive/refs/tags/${S6_OVERLAY_HELPERS_VERSION}.tar.gz" | tar xzf - --strip 1

FROM fetcher AS src_s6_portable_utils
ARG S6_PORTABLE_UTILS_REPO
ARG S6_PORTABLE_UTILS_VERSION
RUN wget --no-check-certificate -qO- "https://github.com/${S6_PORTABLE_UTILS_REPO}/archive/refs/tags/${S6_PORTABLE_UTILS_VERSION}.tar.gz" | tar xzf - --strip 1

FROM fetcher AS src_s6_rc
ARG S6_RC_REPO
ARG S6_RC_VERSION
RUN wget --no-check-certificate -qO- "https://github.com/${S6_RC_REPO}/archive/refs/tags/${S6_RC_VERSION}.tar.gz" | tar xzf - --strip 1

FROM fetcher AS src_skalibs
ARG SKALIBS_REPO
ARG SKALIBS_VERSION
RUN wget --no-check-certificate -qO- "https://github.com/${SKALIBS_REPO}/archive/refs/tags/${SKALIBS_VERSION}.tar.gz" | tar xzf - --strip 1


## build the source
#
FROM builder-base AS builder

WORKDIR /usr/local/src/skalibs
COPY --from=src_skalibs /src .
RUN set -ex \
  && DESTDIR=/out ./configure --host="$(xx-clang --print-target-triple)" --enable-slashpackage --disable-shared --with-default-path=/command:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin --with-sysdep-devurandom=yes \
  && make -j$(nproc) \
  && make DESTDIR=/out -L install update global-links -j$(nproc)

WORKDIR /usr/local/src/execline
COPY --from=src_execline /src .
RUN set -ex \
  && DESTDIR=/out ./configure --host="$(xx-clang --print-target-triple)" --enable-slashpackage --disable-shared --disable-pedantic-posix \
  && make -j$(nproc) \
  && make DESTDIR=/out -L install update global-links -j$(nproc)

WORKDIR /usr/local/src/s6
COPY --from=src_s6 /src .
RUN set -ex \
  && DESTDIR=/out ./configure --host="$(xx-clang --print-target-triple)" --enable-slashpackage --disable-shared \
  && make -j$(nproc) \
  && make DESTDIR=/out -L install update global-links -j$(nproc)

WORKDIR /usr/local/src/s6-dns
COPY --from=src_s6_dns /src .
RUN set -ex \
  && DESTDIR=/out ./configure --host="$(xx-clang --print-target-triple)" --enable-slashpackage --disable-shared \
  && make -j$(nproc) \
  && make DESTDIR=/out -L install update global-links -j$(nproc)

WORKDIR /usr/local/src/s6-linux-init
COPY --from=src_s6_linux_init /src .
RUN set -ex \
  && DESTDIR=/out ./configure --host="$(xx-clang --print-target-triple)" --enable-slashpackage --disable-shared \
  && make -j$(nproc) \
  && make DESTDIR=/out -L install update global-links -j$(nproc)

WORKDIR /usr/local/src/s6-linux-utils
COPY --from=src_s6_linux_utils /src .
RUN set -ex \
  && DESTDIR=/out ./configure --host="$(xx-clang --print-target-triple)" --enable-slashpackage --disable-shared \
  && make -j$(nproc) \
  && make DESTDIR=/out -L install update global-links -j$(nproc)

WORKDIR /usr/local/src/bearssl
COPY --from=src_bearssl /src .
RUN set -ex \
  && mkdir -p /out/include \
  && cp -a ./inc/*.h /out/include/ \
  && make lib CC=xx-clang AR=$(xx-info)-ar LDDLL=xx-clang LD=xx-clang \
  && mkdir -p /out/lib \
  && cp -f build/libbearssl.a /out/lib/

WORKDIR /usr/local/src/s6-networking
COPY --from=src_s6_networking /src .
RUN set -ex \
  && DESTDIR=/out ./configure --host="$(xx-clang --print-target-triple)" --enable-slashpackage --disable-shared --enable-ssl=bearssl --with-ssl-path=/out \
  && make -j$(nproc) \
  && make DESTDIR=/out -L install update global-links -j$(nproc)

WORKDIR /usr/local/src/s6-portable-utils
COPY --from=src_s6_portable_utils /src .
RUN set -ex \
  && DESTDIR=/out ./configure --host="$(xx-clang --print-target-triple)" --enable-slashpackage --disable-shared \
  && make -j$(nproc) \
  && make DESTDIR=/out -L install update global-links -j$(nproc)

WORKDIR /usr/local/src/s6-rc
COPY --from=src_s6_rc /src .
RUN set -ex \
  && DESTDIR=/out ./configure --host="$(xx-clang --print-target-triple)" --enable-slashpackage --disable-shared \
  && make -j$(nproc) \
  && make DESTDIR=/out -L install update global-links -j$(nproc)

WORKDIR /usr/local/src/s6-overlay-helpers
COPY --from=src_s6_overlay_helpers /src .
RUN set -ex \
  && DESTDIR=/out ./configure --host="$(xx-clang --print-target-triple)" --enable-slashpackage --disable-shared \
  && make \
  && make DESTDIR=/out -L install update global-links

WORKDIR /usr/local/src/s6-overlay
COPY --from=src_s6_overlay /src .
ARG S6_OVERLAY_VERSION

RUN set -ex \
  # cleanup \
  && rm -rf /out/package/*/*/include /out/package/*/*/library \
  # s6-overlay \
  && if [[ "${S6_OVERLAY_VERSION}" =~ ^v ]]; then S6_OVERLAY_VERSION="${S6_OVERLAY_VERSION:1}"; fi \
  && find ./layout/rootfs-overlay -type f -name .empty -print | xargs rm -f -- \
  && find ./layout/rootfs-overlay -name '*@VERSION@*' -print | while read name; do \
    mv -f "$name" $(echo "$name" | sed -e "s/@VERSION@/$S6_OVERLAY_VERSION/"); \
  done \
  && find ./layout/rootfs-overlay -type f -size +0c -print | xargs sed -i -e "s|@SHEBANGDIR@|/command|g; s/@VERSION@/$S6_OVERLAY_VERSION/g;" -- \
  && (cd /out/package/admin/ ; ln -s s6-overlay-$S6_OVERLAY_VERSION s6-overlay) \
  && cp -rf ./layout/rootfs-overlay/* /out/ \
  # s6-syslogd-overlay \
  # && find ./layout/syslogd-overlay -type f -name .empty -print | xargs rm -f -- \
  # && find ./layout/syslogd-overlay -name '*@VERSION@*' -print | while read name; do \
  #   mv -f "$name" $(echo "$name" | sed -e "s/@VERSION@/$S6_OVERLAY_VERSION/"); \
  # done \
  # && find ./layout/syslogd-overlay -type f -size +0c -print | xargs sed -i -e "s|@SHEBANGDIR@|/command|g; s/@VERSION@/$S6_OVERLAY_VERSION/g;" -- \
  # && cp -rf ./layout/syslogd-overlay/* /out/ \
  # symlinks \
  && mkdir -p /out/usr/bin \
  && for i in $(ls -1 /out/command); do \
    ln -s "../../command/$i" /out/usr/bin/; \
  done


## build final image
#
FROM "moonbuggy2000/scratch:${SCRATCH_ARCH_TAG}"

COPY --from=builder /out /
COPY --from=add_contenv / /
