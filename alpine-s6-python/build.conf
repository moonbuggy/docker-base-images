# shellcheck shell=bash disable=SC2034

SOURCE_REPO="python"
ARCH_YAML="hooks/arch.alpine.yaml"

BUILD_BUILDX="true"

declare -A BUILD_ARGS=( \
	[PYTHON_VERSION]='Python version' \
	[TARGET_ARCH_TAG]='Target arch' \
	[ALPINE_VERSION]='Alpine version' \
	[S6_ARCH]='S6 arch' \
	[S6_VERSION]='S6 version' \
)

declare -A CHECKOUT_DISPLAY=( \
	[PYTHON_VERSION]='Python version' \
	[SOURCE_LATEST]='Python latest' \
	[PYTHON_MINOR_LATEST]='Python minor latest' \
	[PYTHON_MAJOR_LATEST]='Python major latest' \
	[ALPINE_VERSION]='Alpine version' \
	[ALPINE_LATEST]='Alpine latest' \
	[S6_SOURCE]='S6 source' \
	[S6_REASON]='S6 source reason' \
)

post_checkout_start () {
	# get all relevant tags from the source repo (pattern: <py_ver>-alpine<alp_ver>)
	echo "Fetching source repo tags.."
	eval_param_if 'SOURCE_REPO_TAGS' "docker_api_repo_tags ${SOURCE_REPO} | grep '\\\.' | sed -En 's|^([0-9\\\.]+-alpine[0-9\\\.]*).*$|\\\1|p' | sort -uV"
	SOURCE_REPO_TAGS="$(echo "${SOURCE_REPO_TAGS}" | xargs -n1)"

	# get all available Python versions
	echo "Finding source Python versions.."
	eval_param_if 'SOURCE_PYTHON_VERSIONS' "docker_api_repo_tags ${SOURCE_REPO} | grep '\\\.' | sed -En 's|^([0-9]+\\\.[0-9\\\.]+)-alpine.*$|\\\1|p' | sort -uV"
	SOURCE_PYTHON_VERSIONS="$(echo "${SOURCE_PYTHON_VERSIONS}" | xargs -n1)"

	# get latest Python version
	add_param "$(echo "${SOURCE_PYTHON_VERSIONS}" | tail -n1)" 'SOURCE_LATEST'

	# check if any version numbers are provided via DOCKER_TAG
	case "${DOCKER_TAG}" in
		2*|3*) PYTHON_VERSION="$(echo "${DOCKER_TAG}" | grep -o '^[0-9.]*')" ;;&
		*alpine*) ALPINE_VERSION="$(echo "${DOCKER_TAG}" | grep -oP 'alpine\K[0-9.]*')" ;;
		*) unset ALPINE_VERSION ;;
	esac

	# expand target Python version to highest appropriate full version number
	add_param "$(search_repo_tags "${PYTHON_VERSION:-${SOURCE_LATEST}}" ${SOURCE_PYTHON_VERSIONS})" 'PYTHON_VERSION'

	# get latests minor/major Python versions
	echo "Finding source Alpine versions.."
	add_param "$(parse_version_major ${PYTHON_VERSION})" 'PYTHON_MAJOR'
	add_param "$(search_repo_tags "${PYTHON_MAJOR}" "${SOURCE_PYTHON_VERSIONS}")" 'PYTHON_MAJOR_LATEST'
	add_param "$(parse_version_minor ${PYTHON_VERSION})" 'PYTHON_MINOR'
	add_param "$(search_repo_tags "${PYTHON_MINOR}" "${SOURCE_PYTHON_VERSIONS}")" 'PYTHON_MINOR_LATEST'

	# # get latest Alpine version in the source repo
	# [ -z "${ALPINE_LATEST+set}" ] \
	# 	&& ALPINE_LATEST="$(echo "${SOURCE_REPO_TAGS}" | sed -En "s|.*alpine([0-9.]*)|\1|p" | sort -uV | tail -n1)"
	# add_param "${ALPINE_LATEST}" 'ALPINE_LATEST'

	# get latest Alpine version for this Python version in the source repo
	# [ -z "${ALPINE_LATEST+set}" ] \
	# 	&& ALPINE_LATEST="$(echo "${SOURCE_REPO_TAGS}" | xargs -n1 | sed -En "s|${PYTHON_VERSION}.*alpine([0-9.]*)|\1|p" | sort -uV | tail -n1)"
	# add_param "${ALPINE_LATEST}" 'ALPINE_LATEST'

	add_param "$(search_repo_tags "${PYTHON_VERSION}.*alpine" | grep -oP 'alpine\K[0-9.]*')" 'ALPINE_LATEST'

	# set target Alpine version
	add_param "${ALPINE_VERSION:-${ALPINE_LATEST}}" 'ALPINE_VERSION'
	add_param "$(parse_version_minor ${ALPINE_VERSION})" 'ALPINE_MINOR'

	# if s6-overlay isn't available via apk for the Alpine version then we need to
	# install it from the moonbuggy2000/s6 images on Docker HUb
	echo "Finding s6-overlay versions.."
	add_param "$(alpine_package_version s6-overlay "${ALPINE_VERSION}")" 'S6_APK_VERSION'

	unset EXCLUDED_ARCHES
	unset DOCKERFILE_OVERRIDE

	case "${S6_APK_VERSION}" in
		3*)
			S6_VERSION="${S6_APK_VERSION}"
			S6_SOURCE="Alpine apk"
			S6_REASON=""
			;;
		2*)
			S6_REASON="APK is less than v3"
			;;&
		"")
			S6_REASON="s6-overlay APK not found"
			;;&
		*)
			S6_SOURCE="moonbuggy2000/s6"
			# no from-source images below Alpine 3.10, use pre-built
			if [[ "${ALPINE_MINOR#*.}" -le 9 ]]; then
				S6_VERSION="latest"
				DOCKERFILE_OVERRIDE="Dockerfile.no_src"
			else
				S6_VERSION="latest-alpine${ALPINE_MINOR}"
				DOCKERFILE_OVERRIDE="Dockerfile.no_apk"

				# there's no s6 built from source for these
				[[ "${ALPINE_MINOR#*.}" -le 11 ]] \
					&& EXCLUDED_ARCHES='i386 ppc64le riscv64'
			fi
			;;
	esac

	add_param "${S6_VERSION}" 'S6_VERSION'
	add_param "${S6_REASON}" 'S6_REASON'
	add_param "${S6_SOURCE:-Alpine repo}" 'S6_SOURCE'

	TARGET_TAG="${PYTHON_VERSION}-alpine${ALPINE_VERSION}"
	SOURCE_TAG="${PYTHON_VERSION}-alpine${ALPINE_VERSION}"
}

 get_base_tags () {
	local extra_tags && extra_tags=()

	# matching a latest Python minor/major version
	case "${PYTHON_VERSION}" in
		"${PYTHON_MAJOR_LATEST}")
			extra_tags+=("${PYTHON_MAJOR}-alpine${ALPINE_VERSION}")
			;;&
		"${PYTHON_MINOR_LATEST}")
			extra_tags+=("${PYTHON_MINOR}-alpine${ALPINE_VERSION}")
			;;
	esac

	# if we're using latest Alpine version add tags without the '-alpine<alp_Ver>'
	if [ "x${ALPINE_VERSION}" = "x${ALPINE_LATEST}" ]; then
		for tag in "${extra_tags[@]}"; do
			extra_tags+=("${tag%-*}")
		done
		extra_tags+=("${PYTHON_VERSION}")
	fi

	echo "${extra_tags[@]}"
 }

get_manifest_tags () {
	local extra_tags && extra_tags=()

	# matching a latest Python minor/major version
	case "${PYTHON_VERSION}" in
		"${PYTHON_MAJOR_LATEST}")
			extra_tags+=("${PYTHON_MAJOR}-alpine${ALPINE_VERSION}")
			;;&
		"${PYTHON_MINOR_LATEST}")
			extra_tags+=("${PYTHON_MINOR}-alpine${ALPINE_VERSION}")
			;;
	esac

	# if we're using latest Alpine version add tags without the '-alpine<alp_Ver>'
	if [ "x${ALPINE_VERSION}" = "x${ALPINE_LATEST}" ]; then
		for tag in "${extra_tags[@]}"; do
			extra_tags+=("${tag%-*}")
		done
		extra_tags+=("${PYTHON_VERSION}")

		# also 'latest' manifest tag if we're using latest Python _and_ Alpine
		[ "x${PYTHON_VERSION}" = "x${SOURCE_LATEST}" ] \
			&& extra_tags+=('latest')
	fi

	echo "${extra_tags[@]}"
}
