# shellcheck shell=bash disable=SC2034

SOURCE_REPO="python"
ARCH_YAML="hooks/arch.alpine.yaml"
BUILD_MULTIARCH="true"
NO_QEMU="true"

declare -A BUILD_ARGS=( \
	[PYTHON_VERSION]='Python version' \
	[TARGET_ARCH_TAG]='Target arch' \
	[ALPINE_VERSION]='Alpine version' \
	[ALPINE_MINOR]='Alpine minor version' \
	[APK_PROXY]='APK proxy' \
	[S6_ARCH]='S6 arch' \
	[S6_VERSION]='S6 version' \
)

declare -A CHECKOUT_DISPLAY=( \
	[PYTHON_VERSION]='Python version' \
	[SOURCE_LATEST]='Python latest' \
	[PYTHON_MINOR_LATEST]='Python minor latest' \
	[PYTHON_MAJOR_LATEST]='Python major latest' \
	[ALPINE_VERSION]='Alpine version' \
	[ALPINE_LATEST]='Alpine latest' \
	[APK_PROXY]='APK proxy' \
	[S6_SOURCE]='S6 source' \
	[S6_REASON]='S6 source reason' \
)

post_checkout_start () {
	# get all relevant tags from the source repo (pattern: <py_ver>-alpine<alp_ver>)
	echo "Fetching source repo tags.."
	eval_param_ifn 'SOURCE_REPO_TAGS' \
		"docker_api_repo_tags ${SOURCE_REPO} | sed -En 's|^([0-9]\.[0-9.]+-alpine[0-9.]*).*$|\\\1|p' | sort -uV"

	# get all available Python versions
	echo "Finding source Python versions.."
	eval_param_ifn 'SOURCE_PYTHON_VERSIONS' "echo ${SOURCE_REPO_TAGS} | xargs -n1 | grep -oP '^[0-9.]+' | sort -uV"

	# check if any version numbers are provided via DOCKER_TAG
 	unset ALPINE_VERSION

	case "${DOCKER_TAG}" in
		2*|3*) PYTHON_VERSION="$(echo "${DOCKER_TAG}" | grep -o '^[0-9.]*')" ;;&
		*alpine*)
			ALPINE_VERSION="$(echo "${DOCKER_TAG}" | grep -oP 'alpine\K[0-9.]*')"
			AVAILABLE_PYTHON_VERSIONS="$(echo "${SOURCE_REPO_TAGS}" | grep -oP "[0-9.]+(?=-alpine${ALPINE_VERSION})")"
			;;
		*) AVAILABLE_PYTHON_VERSIONS="${SOURCE_PYTHON_VERSIONS}" ;;
	esac
	add_param "${AVAILABLE_PYTHON_VERSIONS}" 'AVAILABLE_PYTHON_VERSIONS'

	# get latest Python version
	eval_param 'SOURCE_LATEST' "echo \"${AVAILABLE_PYTHON_VERSIONS}\" | xargs -n1 | tail -n1"

	# expand target Python version to highest appropriate full version number
	eval_param 'PYTHON_VERSION' "search_repo_tags ${PYTHON_VERSION:-${SOURCE_LATEST}} ${AVAILABLE_PYTHON_VERSIONS}"

	# get latests minor/major Python versions
	eval_param 'PYTHON_MAJOR' "parse_version_major ${PYTHON_VERSION}"
	eval_param 'PYTHON_MAJOR_LATEST' "search_repo_tags ${PYTHON_MAJOR} ${AVAILABLE_PYTHON_VERSIONS}"
	eval_param 'PYTHON_MINOR' "parse_version_minor ${PYTHON_VERSION}"
	eval_param 'PYTHON_MINOR_LATEST' "search_repo_tags ${PYTHON_MINOR} ${AVAILABLE_PYTHON_VERSIONS}"

	echo "Finding source Alpine versions.."
	eval_param 'ALPINE_LATEST' "search_repo_tags ${PYTHON_VERSION}.*alpine | grep -oP '(?<=alpine)[0-9.]*'"

	# set target Alpine version
	add_param "${ALPINE_VERSION:-${ALPINE_LATEST}}" 'ALPINE_VERSION'
	eval_param 'ALPINE_MINOR' "parse_version_minor ${ALPINE_VERSION}"


	# always use moonbuggy2000/s6 for current major versions, to ensure we have
	# the same s6 version across all builds (the APK will be older than s6 in the
	# just-containers/s6-overlay repo)
	S6_SOURCE="moonbuggy2000/s6-overlay"
	S6_VERSION="latest"
	DOCKERFILE_OVERRIDE="Dockerfile.no_apk"

	# # if s6-overlay isn't available via apk for the Alpine version then we need to
	# # install it from the moonbuggy2000/s6 images on Docker HUb
	# echo "Finding s6-overlay versions.."
	# eval_param 'S6_APK_VERSION' "alpine_package_version s6-overlay \"${ALPINE_VERSION}\""
	#
	# unset DOCKERFILE_OVERRIDE
	#
	# case "${S6_APK_VERSION}" in
	# 	3*)
	# 		S6_VERSION="${S6_APK_VERSION}"
	# 		S6_SOURCE="Alpine apk"
	# 		S6_REASON=""
	# 		;;
	# 	2*)
	# 		S6_REASON="APK is less than v3"
	# 		;;&
	# 	"")
	# 		S6_REASON="s6-overlay APK not found"
	# 		;;&
	# 	*)
	# 		S6_SOURCE="moonbuggy2000/s6-overlay"
	# 		S6_VERSION="latest"
	# 		DOCKERFILE_OVERRIDE="Dockerfile.no_apk"
	# 		;;
	# esac

	add_param "${S6_VERSION}" 'S6_VERSION'
	add_param "${S6_REASON}" 'S6_REASON'
	add_param "${S6_SOURCE:-Alpine repo}" 'S6_SOURCE'

	TARGET_TAG="${PYTHON_VERSION}-alpine${ALPINE_VERSION}"
	SOURCE_TAG="${PYTHON_VERSION}-alpine${ALPINE_VERSION}"
}

get_base_tags () {
	local extra_tags && extra_tags=()

	# matching a latest Python minor/major version
	case "${PYTHON_VERSION}" in
		"${PYTHON_MAJOR_LATEST}")
			extra_tags+=("${PYTHON_MAJOR}-alpine${ALPINE_VERSION}")
			;;&
		"${PYTHON_MINOR_LATEST}")
			extra_tags+=("${PYTHON_MINOR}-alpine${ALPINE_VERSION}")
			;;
	esac

	# if we're using latest Alpine version add tags without the '-alpine<alp_Ver>'
	if [ "x${ALPINE_VERSION}" = "x${ALPINE_LATEST}" ]; then
		for tag in "${extra_tags[@]}"; do
			extra_tags+=("${tag%-*}")
		done
		extra_tags+=("${PYTHON_VERSION}")
	fi

	echo "${extra_tags[@]}"
 }

get_manifest_tags () {
	# local extra_tags && extra_tags=()
	#
	# # matching a latest Python minor/major version
	# case "${PYTHON_VERSION}" in
	# 	"${PYTHON_MAJOR_LATEST}")
	# 		extra_tags+=("${PYTHON_MAJOR}-alpine${ALPINE_VERSION}")
	# 		;;&
	# 	"${PYTHON_MINOR_LATEST}")
	# 		extra_tags+=("${PYTHON_MINOR}-alpine${ALPINE_VERSION}")
	# 		;;
	# esac
	#
	# # if we're using latest Alpine version add tags without the '-alpine<alp_Ver>'
	# if [ "x${ALPINE_VERSION}" = "x${ALPINE_LATEST}" ]; then
	# 	for tag in "${extra_tags[@]}"; do
	# 		extra_tags+=("${tag%-*}")
	# 	done
	# 	extra_tags+=("${PYTHON_VERSION}")
	#
	# 	# also 'latest' manifest tag if we're using latest Python _and_ Alpine
	# 	[ "x${PYTHON_VERSION}" = "x${SOURCE_LATEST}" ] \
	# 		&& extra_tags+=('latest')
	# fi
	local extra_tags && extra_tags=("$(get_base_tags)")

	# add 'latest' manifest tag if we're using latest Python _and_ Alpine
	[ "x${ALPINE_VERSION}" = "x${ALPINE_LATEST}" ] && [ "x${PYTHON_VERSION}" = "x${SOURCE_LATEST}" ] \
		&& extra_tags+=('latest')

	echo "${extra_tags[@]}"
}
