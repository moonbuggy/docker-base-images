# shellcheck shell=bash disable=SC2034

SOURCE_REPO='python'
ARCH_YAML="hooks/arch.alpine.yaml"
SOURCE_ARCH_PREFIX='true'

declare -A BUILD_ARGS=( \
	[TARGET_VERSION]='Python version' \
	[TARGET_ARCH_TAG]='Target arch' \
	[S6_ARCH]='S6 arch' \
	[S6_VERSION]='S6 version' \
)

declare -A CHECKOUT_DISPLAY=( \
	[TARGET_VERSION]='Python version' \
	[SOURCE_LATEST]='Python latest' \
	[SOURCE_MINOR_LATEST]='Python minor latest' \
	[SOURCE_MAJOR_LATEST]='Python major latest' \
	[ALPINE_VERSION]='Alpine version' \
	[ALPINE_LATEST]='Alpine latest' \
)

post_checkout_start () {
	# get all relevant tags from the source repo (pattern: <py_ver>-alpine<alp_ver>)
	[ -z "${SOURCE_REPO_TAGS+set}" ] \
		&& SOURCE_REPO_TAGS="$(docker_api_repo_tags ${SOURCE_REPO} | grep '\.' | sed -En 's|^([0-9\.]+-alpine[0-9.]*).*|\1|p' | sort -uV)"
	add_param "$(echo "${SOURCE_REPO_TAGS}" | xargs)" 'SOURCE_REPO_TAGS'
	SOURCE_REPO_TAGS="$(echo "${SOURCE_REPO_TAGS}" | xargs -n1)"

	# get all available Python versions
	[ -z "${SOURCE_PYTHON_VERSIONS+set}" ] \
		&& SOURCE_PYTHON_VERSIONS="$(echo "${SOURCE_REPO_TAGS}" | sed -En 's|^([0-9]+\.[0-9\.]+)-alpine.*|\1|p' | sort -uV)"
	add_param "$(echo "${SOURCE_PYTHON_VERSIONS}" | xargs)" 'SOURCE_PYTHON_VERSIONS'
	SOURCE_PYTHON_VERSIONS="$(echo "${SOURCE_PYTHON_VERSIONS}" | xargs -n1)"

	# get latest Python version
	add_param "$(echo "${SOURCE_PYTHON_VERSIONS}" | tail -n1)" 'SOURCE_LATEST'

	# check if any version numbers are provided via DOCKER_TAG
	case "${DOCKER_TAG}" in
		2*|3*) TARGET_VERSION="$(echo "${DOCKER_TAG}" | grep -o '^[0-9.]*')" ;;&
		*alpine*) ALPINE_VERSION="$(echo "${DOCKER_TAG}" | grep -oP 'alpine\K[0-9.]*')" ;;
		*) unset ALPINE_VERSION ;;
	esac

	# expand target Python version to highest appropriate full version number
	add_param "$(search_repo_tags "${TARGET_VERSION:-${SOURCE_LATEST}}" ${SOURCE_PYTHON_VERSIONS})" 'TARGET_VERSION'

	# get latests minor/major Python versions
	add_param "$(echo ${TARGET_VERSION} | awk -F \. '{print $1}')" 'SOURCE_MAJOR'
	add_param "$(search_repo_tags "${SOURCE_MAJOR}" "${SOURCE_PYTHON_VERSIONS}")" 'SOURCE_MAJOR_LATEST'

	add_param "$(echo ${TARGET_VERSION} | awk -F \. '{print $1"."$2}')" 'SOURCE_MINOR'
	add_param "$(search_repo_tags "${SOURCE_MINOR}" "${SOURCE_PYTHON_VERSIONS}")" 'SOURCE_MINOR_LATEST'

	# # get latest Alpine version in the source repo
	# [ -z "${ALPINE_LATEST+set}" ] \
	# 	&& ALPINE_LATEST="$(echo "${SOURCE_REPO_TAGS}" | sed -En "s|.*alpine([0-9.]*)|\1|p" | sort -uV | tail -n1)"
	# add_param "${ALPINE_LATEST}" 'ALPINE_LATEST'

	# get latest Alpine version for this Python version in the source repo
	# [ -z "${ALPINE_LATEST+set}" ] \
	# 	&& ALPINE_LATEST="$(echo "${SOURCE_REPO_TAGS}" | xargs -n1 | sed -En "s|${TARGET_VERSION}.*alpine([0-9.]*)|\1|p" | sort -uV | tail -n1)"
	# add_param "${ALPINE_LATEST}" 'ALPINE_LATEST'

	# add_param "$(echo "${SOURCE_REPO_TAGS}" | xargs -n1 | sed -En "s|${TARGET_VERSION}.*alpine([0-9.]*)|\1|p" | sort -uV | tail -n1)" 'ALPINE_LATEST'
	add_param "$(search_repo_tags "${TARGET_VERSION}.*alpine" | grep -oP 'alpine\K[0-9.]*')" 'ALPINE_LATEST'

	# print_param "${ALPINE_VERSION}" 'ALPINE_VERSION'
	# print_param "${ALPINE_LATEST}" 'ALPINE_LATEST'

	# set target Alpine version
	# [ -z "${ALPINE_VERSION}" ] && ALPINE_VERSION="${ALPINE_LATEST}"
	add_param "${ALPINE_VERSION:-${ALPINE_LATEST}}" 'ALPINE_VERSION'

	TARGET_TAG="${TARGET_VERSION}-alpine${ALPINE_VERSION}"
	SOURCE_TAG="${TARGET_VERSION}-alpine${ALPINE_VERSION}"
}

 get_base_tags () {
	local extra_tags && extra_tags=()

	# matching a latest Python minor/major version
	case "${TARGET_VERSION}" in
		"${SOURCE_MAJOR_LATEST}")
			extra_tags+=("${SOURCE_MAJOR}-alpine${ALPINE_VERSION}")
			;;&
		"${SOURCE_MINOR_LATEST}")
			extra_tags+=("${SOURCE_MINOR}-alpine${ALPINE_VERSION}")
			;;
	esac

	# if we're using latest Alpine version add tags without the '-alpine<alp_Ver>'
	if [ "x${ALPINE_VERSION}" = "x${ALPINE_LATEST}" ]; then
		for tag in "${extra_tags[@]}"; do
			extra_tags+=("${tag%-*}")
		done
		extra_tags+=("${TARGET_VERSION}")
	fi

	echo "${extra_tags[@]}"
 }

get_manifest_tags () {
	local extra_tags && extra_tags=()

	# matching a latest Python minor/major version
	case "${TARGET_VERSION}" in
		"${SOURCE_MAJOR_LATEST}")
			extra_tags+=("${SOURCE_MAJOR}-alpine${ALPINE_VERSION}")
			;;&
		"${SOURCE_MINOR_LATEST}")
			extra_tags+=("${SOURCE_MINOR}-alpine${ALPINE_VERSION}")
			;;
	esac

	# if we're using latest Alpine version add tags without the '-alpine<alp_Ver>'
	if [ "x${ALPINE_VERSION}" = "x${ALPINE_LATEST}" ]; then
		for tag in "${extra_tags[@]}"; do
			extra_tags+=("${tag%-*}")
		done
		extra_tags+=("${TARGET_VERSION}")

		# also 'latest' manifest tag if we're using latest Python _and_ Alpine
		[ "x${TARGET_VERSION}" = "x${SOURCE_LATEST}" ] \
			&& extra_tags+=('latest')
	fi

	echo "${extra_tags[@]}"
}
