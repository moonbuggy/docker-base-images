SOURCE_REPO="debian"

QEMU_REPO="multiarch/qemu-user-static"
S6_REPO="just-containers/s6-overlay"
MANIFEST_TOOL_REPO="estesp/manifest-tool"

ARCH_YAML="arch.yaml"
CONFIG_YAML="config.yaml"

## parse Docker environment variables
#
TARGET_TAG="$(echo "${DOCKER_TAG}" | cut -d'-' -f1)"
BUILD_ARCH="$(echo "${DOCKER_TAG}" | grep -oP '(?<=\-)([[:alnum:]]*)$')"

SOURCE_TAG="${TARGET_TAG}-slim"
SOURCE_IMAGE="${SOURCE_REPO}:${SOURCE_TAG}"

#echo '--- env ---'

## handling writing and printing of parameters
#
add_param () { echo "${1}: ${2}" >> "${CONFIG_YAML}"; }
print_param () { printf '%-20s %-8s\n' "${1}" "${2}"; }

add_print_param () {
	add_param "${1}" "${2}"
	[ -n "${3}" ] && desc="${3}" || desc="${1}"
	print_param "${desc}" "${2}"
}

## get_api_data <repo> <request>
#
get_api_data () {
	local temp_data && temp_data="$(curl -s -w "%{http_code}\n" "https://api.github.com/repos/${1}/${2}")"
	local http_code && http_code="$(echo "$temp_data" | tail -n1)"
	if [ "$http_code" != "200" ]; then
		echo "HTTP Error: $http_code"
		return 1
	fi
	echo "$temp_data" | sed '$d'
}

## parse YAML configuration
#
parse_yaml () {
	local prefix && prefix=$2
	local s && s='[[:space:]]*' w='[a-zA-Z0-9_]*'
	local fs && fs=$(echo @|tr @ '\034')
	sed -ne "s|^\($s\):|\1|" \
		-e "s|^\($s\)\($w\)$s:$s[\"']\(.*\)[\"']$s\$|\1$fs\2$fs\3|p" \
		-e "s|^\($s\)\($w\)$s:$s\(.*\)$s\$|\1$fs\2$fs\3|p" "${1}" |
		awk -F"${fs}" '{
			indent = length($1)/2;
			vname[indent] = $2;
			for (i in vname) {if (i > indent) {delete vname[i]}}
			if (length($3) > 0) {
				vn=""; for (i=0; i<indent; i++) {vn=(vn)(vname[i])("_")}
				printf("%s%s%s=%s\n", "'"$prefix"'",vn, $2, $3);
			}
		}'
}

## get manifest-tool
#
get_manifest_tool () {
	if [ ! -f "manifest-tool" ]; then
		echo "Fetching manifest-tool.." && echo
		LATEST_MANIFEST_TOOL="$(get_api_data ${MANIFEST_TOOL_REPO} "releases/latest" | sed -rn 's/.*"tag_name"\W+"([^"]+)".*/\1/p')"
		curl -sLo "manifest-tool" "https://github.com/${MANIFEST_TOOL_REPO}/releases/download/${LATEST_MANIFEST_TOOL}/manifest-tool-linux-amd64"
	fi
	chmod +x "manifest-tool"
}

## read and declare variables from arch.yaml
#
get_arch_config () {
	echo "getting arch config: ${1}"
	parse_yaml "${ARCH_YAML}"
	for key in ${available_keys}; do
		var="${1}_${key}"
		declare "${key}=${!var}"
		echo "${key}=${!var}"
	done
}

[ -f ${CONFIG_YAML} ] && while read -r line; do declare "${line}"; done < <(parse_yaml "${CONFIG_YAML}")
