S6_REPO="just-containers/s6-overlay"
QEMU_REPO="multiarch/qemu-user-static"
MANIFEST_TOOL_REPO="estesp/manifest-tool"

## parse Docker environment variables
#
DEB_RELEASE="$(echo "${DOCKER_TAG}" | cut -d'-' -f1)"
BUILD_ARCH="$(echo "${DOCKER_TAG}" | grep -oP '(?<=\-)([[:alnum:]]*)$')"

## format parameter printing
#
print_param () { printf '%-20s %-8s\n' "${1}" "${2}"; }

## get_api_data <repo> <request>
#
get_api_data () {
	local temp_data="$(curl -s -w "%{http_code}\n" "https://api.github.com/repos/${1}/${2}")"
	local http_code="$(echo "$temp_data" | tail -n1)"
	if [ "$http_code" != "200" ]; then
		echo "HTTP Error: $http_code"
		return 1
	fi
	echo "$temp_data" | sed '$d'
}

## parse YAML configuration
#
parse_yaml () {
	local prefix=$2
	local s='[[:space:]]*' w='[a-zA-Z0-9_]*' fs=$(echo @|tr @ '\034')
	sed -ne "s|^\($s\):|\1|" \
		-e "s|^\($s\)\($w\)$s:$s[\"']\(.*\)[\"']$s\$|\1$fs\2$fs\3|p" \
		-e "s|^\($s\)\($w\)$s:$s\(.*\)$s\$|\1$fs\2$fs\3|p" "${1}" |
		awk -F"${fs}" '{
			indent = length($1)/2;
			vname[indent] = $2;
			for (i in vname) {if (i > indent) {delete vname[i]}}
			if (length($3) > 0) {
				vn=""; for (i=0; i<indent; i++) {vn=(vn)(vname[i])("_")}
				printf("%s%s%s=%s\n", "'"$prefix"'",vn, $2, $3);
			}
		}'
}

## prepare build perameters
#
echo '--- env ---'
while read -r line; do declare "${line}"; done < <(parse_yaml builds.yaml)

arches="$(sed -En 's/(^\w*):\s*$/\1/p' builds.yaml | tr '\n' ' ')"
print_param 'Found arches' "${arches}"

## only build a specific arch if specified in the tag
#
[ -n "${BUILD_ARCH}" ] && [[ "${arches}" == *"${BUILD_ARCH}"* ]] && arches="${BUILD_ARCH}"

## validate architectures
#
#platforms=''
#valid_arches=''
#excluded_list=''
for arch in ${arches}; do
	excluded="${arch}_EXCLUDE_RELEASE"
	[[ "${!excluded}" == *"${DEB_RELEASE}"* ]] && excluded_list="${excluded_list}${arch} "
	if [[ ! "${!excluded}" == *"${DEB_RELEASE}"* ]]; then
		platform_string="${arch}_PLATFORM"
		platforms="${platforms},${!platform_string}"
		valid_arches="${valid_arches}${arch} "
	fi
done

[ -n "${excluded_list}" ] && print_param 'Excluded' "${excluded_list}"

platforms="${platforms:1}"
#arches="${valid_arches}"

print_param 'Valid arches' "${valid_arches}"
print_param 'Platforms' "${platforms}"
echo
